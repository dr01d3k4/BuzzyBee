////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// global.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.GAME_NAME = "BUZZY_BEE";

  window.GAME_VERSION_MAJOR = 1;

  window.GAME_VERSION_MINOR = 0;

  window.GAME_VERSION = "" + GAME_VERSION_MAJOR + "." + GAME_VERSION_MINOR;

  window.CANVAS_WIDTH = 720;

  window.CANVAS_HEIGHT = 512;

  window.CANVAS_BORDER_THICKNESS = 1;

  window.GROUND_HEIGHT = CANVAS_HEIGHT * 0.2;

  window.SCREEN_HEIGHT = CANVAS_HEIGHT - GROUND_HEIGHT;

  window.GROUND_GRASS_HEIGHT = Math.floor(GROUND_HEIGHT * 0.3);

  window.OUTLINE_THICKNESS = 2;

  window.DAYTIME_CHANCE = 0.8;

  window.BACKGROUND_PARALLAX = 0.2;

  window.BUILDING_WIDTH = Math.floor(CANVAS_WIDTH * 0.04);

  window.BUILDING_COUNT = 50;

  window.BACKGROUND_WIDTH = BUILDING_WIDTH * BUILDING_COUNT;

  window.BUILDING_STOREY_HEIGHT = SCREEN_HEIGHT * 0.05;

  window.BUILDING_MIN_STOREYS = 1;

  window.BUILDING_MAX_STOREYS = 12;

  window.BUILDING_HERE_CHANCE = 0.7;

  window.BUILDING_LIGHT_ON_DAY_CHANCE = 0.1;

  window.BUILDING_LIGHT_ON_NIGHT_CHANCE = 0.8;

  window.BUILDING_WINDOWS_WIDE = 2;

  window.BUILDING_WINDOWS_HIGH = 1;

  window.BUILDING_WINDOW_WIDTH = Math.floor(BUILDING_WIDTH / (2 * BUILDING_WINDOWS_WIDE));

  window.BUILDING_WINDOW_HEIGHT = Math.floor(BUILDING_STOREY_HEIGHT / (2 * BUILDING_WINDOWS_HIGH));

  window.MIN_STAR_HEIGHT = SCREEN_HEIGHT * 0;

  window.MAX_STAR_HEIGHT = SCREEN_HEIGHT * 0.35;

  window.STAR_COUNT = 100;

  window.STAR_MAX_SIZE = 2;

  window.PLAYER_WIDTH = 24;

  window.PLAYER_HEIGHT = 24;

  window.PLAYER_START_X = Math.floor(CANVAS_WIDTH * 0.2);

  window.PLAYER_START_Y = Math.floor((SCREEN_HEIGHT * 0.5) - (PLAYER_HEIGHT / 2));

  window.PLAYER_STRIPE_COUNT = 4;

  window.PLAYER_STRIPE_WIDTH = Math.floor(PLAYER_WIDTH / (2.5 * PLAYER_STRIPE_COUNT));

  window.PLAYER_EYE_SIZE = 4;

  window.PLAYER_EYE_BORDER = 2;

  window.PLAYER_JUMP_ROTATION = -30;

  window.PLAYER_MAX_ROTATION = 35;

  window.PLAYER_ROTATION_SPEED = 80;

  window.PLAYER_TRAIL_THICKNESS = 2;

  window.PLAYER_AI_MIN_Y_DIFFERENCE = -10;

  window.GRAVITY = 700;

  window.JUMP_VELOCITY = -260;

  window.PIPE_COUNT = 10;

  window.PIPE_GAP_HORIZONTAL = Math.floor(CANVAS_WIDTH * 0.21);

  window.PIPE_WIDTH = Math.floor(CANVAS_WIDTH * 0.055);

  window.PIPE_GAP_HEIGHT = Math.floor(SCREEN_HEIGHT * 0.21);

  window.PIPE_MIN_HEIGHT = Math.floor(SCREEN_HEIGHT * 0.1);

  window.START_PIPE_X = Math.floor(CANVAS_WIDTH * 1.05);

  window.MOVE_SPEED = 120;

  window.GAME_SCORE_X = 15;

  window.GAME_SCORE_Y = 15;

  window.GAME_SCORE_EXTRA_WIDTH = 10;

  window.GAME_SCORE_HEIGHT = 30;

  window.GAME_PAUSE_BUTTON_WIDTH = 32;

  window.GAME_PAUSE_BUTTON_HEIGHT = window.GAME_PAUSE_BUTTON_WIDTH;

  window.GAME_PAUSE_BUTTON_X = CANVAS_WIDTH - GAME_SCORE_X - GAME_PAUSE_BUTTON_WIDTH;

  window.RANDOM_PLANE_WIDTH = 60;

  window.RANDOM_PLANE_HEIGHT = 20;

  window.RANDOM_PLANE_SPEED = 250;

  window.RANDOM_PLANE_TRAIL_LENGTH = Math.floor(CANVAS_WIDTH * 0.3);

  window.RANDOM_PLANE_TRAIL_THICKNESS = 1;

  window.RANDOM_PLANE_MIN_Y = Math.floor(SCREEN_HEIGHT * 0.02);

  window.RANDOM_PLANE_MAX_Y = Math.floor(SCREEN_HEIGHT * 0.35);

  window.RANDOM_PLANE_MIN_X = Math.floor(CANVAS_WIDTH * 1.2);

  window.RANDOM_PLANE_MAX_X = Math.floor(CANVAS_WIDTH * 6);

  window.BODY_FONT = "bold 18pt Arial";

  window.GAME_OVERLAY_TITLE_FONT = "bold 36pt Arial";

  window.MAIN_TITLE_X = CANVAS_WIDTH * 0.78;

  window.MAIN_TITLE_Y = CANVAS_HEIGHT * 0.18;

  window.MAIN_TITLE_ANGLE = Math.PI / 8;

  window.MAIN_TITLE_EXTRA_WIDTH = 10;

  window.MAIN_TITLE_HEIGHT = 60;

  window.MAIN_PLAY_BOX_X = CANVAS_WIDTH * 0.64;

  window.MAIN_PLAY_BOX_Y = CANVAS_HEIGHT * 0.67;

  window.MAIN_PLAY_BOX_WIDTH = CANVAS_WIDTH * 0.34;

  window.MAIN_PLAY_BOX_HEIGHT = CANVAS_HEIGHT * 0.3;

  window.GAME_OVERLAY_X = CANVAS_WIDTH * 0.15;

  window.GAME_OVERLAY_Y = CANVAS_HEIGHT * 0.1;

  window.GAME_OVERLAY_WIDTH = CANVAS_WIDTH * 0.7;

  window.GAME_OVERLAY_HEIGHT = CANVAS_HEIGHT * 0.8;

  window.GAME_OVERLAY_TITLE_TEXT_X = CANVAS_WIDTH * 0.5;

  window.GAME_OVERLAY_TITLE_TEXT_Y = CANVAS_HEIGHT * 0.18;

  window.GAME_OVERLAY_BODY_TEXT_X = CANVAS_WIDTH * 0.5;

  window.GAME_OVERLAY_BODY_TEXT_Y = CANVAS_HEIGHT * 0.4;

  window.GAME_OVERLAY_BUTTON_MARGIN = GAME_OVERLAY_WIDTH * 0.02;

  window.GAME_OVERLAY_BUTTON_WIDTH = (GAME_OVERLAY_WIDTH - (4 * GAME_OVERLAY_BUTTON_MARGIN)) / 2;

  window.GAME_OVERLAY_BUTTON_HEIGHT = 40;

  window.SAVE_SEPERATOR = "|";

  window.SAVE_HIGHSCORE_TITLE = "HIGHSCORES";

  window.SAVE_HIGHSCORE_COUNT = 8;

  window.SAVE_LAST_NAME_TITLE = "LAST_NAME";

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// util.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.requestAnimFrame = (function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
      return setTimout(callback, 1000 / 60);
    };
  })();

  window.randomNumberExclusive = function(lower, upper) {
    if (lower == null) {
      lower = 0;
    }
    if (upper == null) {
      upper = 1;
    }
    return Math.floor(Math.random() * (upper - lower)) + lower;
  };

  window.randomNumberInclusive = function(lower, upper) {
    if (lower == null) {
      lower = 0;
    }
    if (upper == null) {
      upper = 1;
    }
    return Math.floor(Math.random() * (upper + 1 - lower)) + lower;
  };

  window.setCanvasSize = function(canvas, width, height) {
    if (width == null) {
      width = 0;
    }
    if (height == null) {
      height = 0;
    }
    canvas.width = width;
    canvas.height = height;
    return canvas;
  };

  window.createCanvas = function(width, height) {
    if (width == null) {
      width = 0;
    }
    if (height == null) {
      height = 0;
    }
    return setCanvasSize(document.createElement("canvas"), width, height);
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// key_input.js

// Generated by CoffeeScript 1.7.1
(function() {
  var i, keys, previousKeys, respondToKeyDownFunction, _i;

  keys = [];

  previousKeys = [];

  for (i = _i = 0; _i < 255; i = ++_i) {
    keys[i] = false;
    previousKeys[i] = false;
  }

  respondToKeyDownFunction = null;

  window.onKeyDown = function(event) {
    if (event == null) {
      event = window.event;
    }
    keys[event.keyCode] = true;
    if (respondToKeyDownFunction != null) {
      return respondToKeyDownFunction(event.keyCode);
    }
  };

  window.onKeyUp = function(event) {
    if (event == null) {
      event = window.event;
    }
    return keys[event.keyCode] = false;
  };

  window.updateKeys = function() {
    var _j, _ref;
    for (i = _j = 0, _ref = keys.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      previousKeys[i] = keys[i];
    }
    return null;
  };

  window.cleanKeys = function() {
    var _j, _ref;
    for (i = _j = 0, _ref = keys.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      keys[i] = false;
      previousKeys[i] = false;
    }
    return null;
  };

  window.Key = {
    JUMP: [38, 87, 32, 13],
    PAUSE: [27, 80]
  };

  window.isKeyDownIn = function(key, array) {
    var _j, _ref;
    for (i = _j = 0, _ref = key.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      if (array[key[i]]) {
        return true;
      }
    }
    return false;
  };

  window.isKeyDown = function(key) {
    return isKeyDownIn(key, keys);
  };

  window.isKeyUp = function(key) {
    return !isKeyDown(key);
  };

  window.wasKeyDown = function(key) {
    return isKeyDownIn(key, previousKeys);
  };

  window.wasKeyUp = function(key) {
    return !wasKeyDown(key);
  };

  window.isKeyPressed = function(key) {
    return isKeyDown(key) && !wasKeyDown(key);
  };

  window.setRespondToKeyDownFunction = function(func) {
    return respondToKeyDownFunction = func;
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// mouse_input.js

// Generated by CoffeeScript 1.7.1
(function() {
  var getMousePosition, mouse, mouseLetGo, previousMouse, setMousePosition;

  mouse = {
    down: false,
    x: -1,
    y: -1
  };

  previousMouse = {
    down: false,
    x: -1,
    y: -1
  };

  mouseLetGo = false;

  window.updateMouse = function() {
    previousMouse.down = mouse.down;
    previousMouse.x = mouse.x;
    previousMouse.y = mouse.y;
    if (mouseLetGo) {
      mouse.down = false;
      return mouseLetGo = false;
    }
  };

  getMousePosition = function(event) {
    var x, y;
    x = -1;
    y = -1;
    if ((event.x == null) || (event.y == null)) {
      x = event.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      y = event.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    } else {
      x = event.x;
      y = event.y;
    }
    x -= canvas.offsetLeft + CANVAS_BORDER_THICKNESS;
    y -= canvas.offsetTop + CANVAS_BORDER_THICKNESS;
    return [x, y];
  };

  setMousePosition = function(event) {
    var _ref;
    if (event == null) {
      event = window.event;
    }
    return _ref = getMousePosition(event), mouse.x = _ref[0], mouse.y = _ref[1], _ref;
  };

  window.onMouseDown = function(event) {
    if (event == null) {
      event = window.event;
    }
    mouse.down = true;
    return setMousePosition(event);
  };

  window.onMouseMove = function(event) {
    if (event == null) {
      event = window.event;
    }
    return setMousePosition(event);
  };

  window.onMouseUp = function(event) {
    if (event == null) {
      event = window.event;
    }
    mouseLetGo = true;
    return setMousePosition(event);
  };

  window.isMouseDown = function() {
    return mouse.down;
  };

  window.isMouseUp = function() {
    return !mouse.down;
  };

  window.isMousePressed = function() {
    return mouse.down && !previousMouse.down;
  };

  window.getMouseX = function() {
    return mouse.x;
  };

  window.getMouseY = function() {
    return mouse.y;
  };

  window.wasMouseDown = function() {
    return previousMouse.down;
  };

  window.wasMouseUp = function() {
    return !previousMouse.down;
  };

  window.setMouseDown = function(down) {
    if (down == null) {
      down = false;
    }
    return mouse.down = down;
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// button.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.Button = (function() {
    function Button(options) {
      this.x = options.x || 0;
      this.y = options.y || 0;
      this.width = options.width || 0;
      this.height = options.height || 0;
      this.text = options.text || 0;
      this.hoveredText = options.hoveredText || 0;
      this.hovered = false;
      this.clicked = false;
    }

    Button.prototype.update = function(deltaTime) {
      var mouseX, mouseY;
      mouseX = getMouseX();
      mouseY = getMouseY();
      this.hovered = mouseX >= this.x && mouseX <= this.x + this.width && mouseY >= this.y && mouseY <= this.y + this.height;
      return this.clicked = this.hovered && isMousePressed();
    };

    Button.prototype.render = function(context) {
      var text;
      context.fillStyle = this.hovered ? Colour.BUTTON_HOVER_BACKGROUND : Colour.TEXT_BACKGROUND;
      context.fillRect(this.x, this.y, this.width, this.height);
      context.beginPath();
      context.strokeStyle = Colour.TEXT;
      context.lineWidth = OUTLINE_THICKNESS;
      context.rect(this.x, this.y, this.width, this.height);
      context.stroke();
      context.fillStyle = Colour.TEXT;
      context.font = BODY_FONT;
      context.textAlign = "center";
      context.textBaseline = "middle";
      text = this.hovered ? this.hoveredText : this.text;
      return context.fillText(text, this.x + (this.width / 2), this.y + (this.height / 2));
    };

    return Button;

  })();

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// colour.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.Colour = {
    DAY_SKY: "#00bbff",
    NIGHT_SKY: "#000000",
    GROUND: "#00ff00",
    PLAYER: "#ffff00",
    PLAYER_STRIPE: "#000000",
    PIPE: "#8b4513",
    COLLISION: "#0000ff",
    TEXT: "#000000",
    TEXT_BACKGROUND: "#ffffff",
    BUTTON_HOVER_BACKGROUND: "#cccccc",
    BUILDING: "#646464",
    BUILDING_LIGHT_ON: "#ffff00",
    BUILDING_LIGHT_OFF: "#101010",
    STAR: "#ffffff"
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// saves.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.sortScoreArray = function(scores) {
    return scores.sort(function(a, b) {
      return b[0] - a[0];
    });
  };

  window.getSaveExpire = function() {
    var now;
    now = new Date();
    now.setFullYear(now.getFullYear() + 5);
    return now.toUTCString();
  };

  window.clearSave = function() {
    document.cookie = "";
    return document.cookie = GAME_NAME + "=; expires=" + getSaveExpire();
  };

  window.saveGame = function(data) {
    var name, saveString, score, _i, _len, _ref, _ref1;
    saveString = "";
    saveString += data.GAME_NAME + "=";
    saveString += data.GAME_NAME + SAVE_SEPERATOR + data.GAME_VERSION + SAVE_SEPERATOR;
    if (data[SAVE_HIGHSCORE_TITLE] != null) {
      sortScoreArray(data[SAVE_HIGHSCORE_TITLE]);
      data[SAVE_HIGHSCORE_TITLE].splice(SAVE_HIGHSCORE_COUNT);
      saveString += SAVE_HIGHSCORE_TITLE + SAVE_SEPERATOR + data[SAVE_HIGHSCORE_TITLE].length + SAVE_SEPERATOR;
      _ref = data[SAVE_HIGHSCORE_TITLE];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], score = _ref1[0], name = _ref1[1];
        saveString += score + SAVE_SEPERATOR + name + SAVE_SEPERATOR;
      }
    }
    if (data[SAVE_LAST_NAME_TITLE] != null) {
      saveString += SAVE_LAST_NAME_TITLE + SAVE_SEPERATOR + data[SAVE_LAST_NAME_TITLE] + SAVE_SEPERATOR;
    }
    if (saveString.endsWith(SAVE_SEPERATOR)) {
      saveString = saveString.substr(0, saveString.length - 1);
    }
    saveString += "; expires=" + getSaveExpire();
    console.log("Saving", saveString);
    return document.cookie = saveString;
  };

  window.loadGame = function() {
    var countScores, data, decodedData, highscores, i, j, name, score, _i;
    console.log("Loading", document.cookie);
    data = document.cookie.split("=")[1].split(";")[0];
    console.log("Data", data);
    if (!document.cookie.startsWith(GAME_NAME)) {
      console.log("Save data doesn't start with GAME_NAME");
      decodedData = {
        GAME_NAME: "",
        GAME_VERSION: ""
      };
      decodedData[SAVE_HIGHSCORE_TITLE] = [];
      decodedData[SAVE_LAST_NAME_TITLE] = "";
      return decodedData;
    }
    data = data.split(SAVE_SEPERATOR);
    decodedData = {
      GAME_NAME: data[0],
      GAME_VERSION: data[1]
    };
    decodedData[SAVE_HIGHSCORE_TITLE] = [];
    decodedData[SAVE_LAST_NAME_TITLE] = "";
    i = 2;
    while (i < data.length) {
      if (data[i] === SAVE_HIGHSCORE_TITLE) {
        highscores = [];
        i += 1;
        countScores = parseInt(data[i]);
        for (j = _i = 0; 0 <= countScores ? _i < countScores : _i > countScores; j = 0 <= countScores ? ++_i : --_i) {
          i += 1;
          score = parseInt(data[i]);
          i += 1;
          name = data[i];
          highscores.push([score, name]);
        }
        sortScoreArray(highscores);
        decodedData[SAVE_HIGHSCORE_TITLE] = highscores;
      } else if (data[i] === SAVE_LAST_NAME_TITLE) {
        i += 1;
        decodedData[SAVE_LAST_NAME_TITLE] = data[i];
      }
      i += 1;
    }
    return decodedData;
  };

  window.addScore = function(score, name) {
    var data;
    if (score == null) {
      score = 0;
    }
    if (name == null) {
      name = "";
    }
    console.log("Saving \"" + score + "\" by \"" + name + "\"");
    data = loadGame();
    data["GAME_NAME"] = GAME_NAME;
    data["GAME_VERSION"] = GAME_VERSION;
    data[SAVE_HIGHSCORE_TITLE].push([score, name]);
    data[SAVE_LAST_NAME_TITLE] = name;
    return saveGame(data);
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// background_canvas.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.backgroundCanvas = null;

  window.createBackgroundCanvas = function(daytime) {
    var buildingPosition, context, height, i, light_chance, size, storey, storeys, x, y, _i, _j, _k, _l, _ref, _results;
    if (daytime == null) {
      daytime = true;
    }
    window.backgroundCanvas = createCanvas(BACKGROUND_WIDTH, CANVAS_HEIGHT);
    context = backgroundCanvas.getContext("2d");
    context.fillStyle = daytime ? Colour.DAY_SKY : Colour.NIGHT_SKY;
    context.fillRect(0, 0, BACKGROUND_WIDTH, SCREEN_HEIGHT);
    context.fillStyle = Colour.GROUND;
    context.fillRect(0, SCREEN_HEIGHT, BACKGROUND_WIDTH, GROUND_GRASS_HEIGHT);
    context.fillStyle = Colour.PIPE;
    context.fillRect(0, SCREEN_HEIGHT + GROUND_GRASS_HEIGHT, BACKGROUND_WIDTH, GROUND_HEIGHT - GROUND_GRASS_HEIGHT);
    if (!daytime) {
      context.fillStyle = Colour.STAR;
      for (i = _i = 0; 0 <= STAR_COUNT ? _i < STAR_COUNT : _i > STAR_COUNT; i = 0 <= STAR_COUNT ? ++_i : --_i) {
        x = randomNumberExclusive(0, BACKGROUND_WIDTH);
        y = randomNumberExclusive(MIN_STAR_HEIGHT, MAX_STAR_HEIGHT);
        size = randomNumberInclusive(1, STAR_MAX_SIZE);
        context.beginPath();
        context.arc(x, y, size, 0, 2 * Math.PI);
        context.fill();
      }
    }
    buildingPosition = 0;
    light_chance = daytime ? BUILDING_LIGHT_ON_DAY_CHANCE : BUILDING_LIGHT_ON_NIGHT_CHANCE;
    _results = [];
    while (buildingPosition < BACKGROUND_WIDTH) {
      if (Math.random() < BUILDING_HERE_CHANCE) {
        storeys = randomNumberInclusive(BUILDING_MIN_STOREYS, BUILDING_MAX_STOREYS);
        height = storeys * BUILDING_STOREY_HEIGHT;
        context.fillStyle = Colour.BUILDING;
        context.fillRect(buildingPosition, SCREEN_HEIGHT - height, BUILDING_WIDTH, height);
        for (storey = _j = 1, _ref = storeys + 1; 1 <= _ref ? _j < _ref : _j > _ref; storey = 1 <= _ref ? ++_j : --_j) {
          for (x = _k = 0; 0 <= BUILDING_WINDOWS_WIDE ? _k < BUILDING_WINDOWS_WIDE : _k > BUILDING_WINDOWS_WIDE; x = 0 <= BUILDING_WINDOWS_WIDE ? ++_k : --_k) {
            for (y = _l = 0; 0 <= BUILDING_WINDOWS_HIGH ? _l < BUILDING_WINDOWS_HIGH : _l > BUILDING_WINDOWS_HIGH; y = 0 <= BUILDING_WINDOWS_HIGH ? ++_l : --_l) {
              if (Math.random() < light_chance) {
                context.fillStyle = Colour.BUILDING_LIGHT_ON;
              } else {
                context.fillStyle = Colour.BUILDING_LIGHT_OFF;
              }
              context.fillRect(buildingPosition + (BUILDING_WINDOW_WIDTH / 2) + (x * BUILDING_WINDOW_WIDTH * 2), SCREEN_HEIGHT - (storey * BUILDING_STOREY_HEIGHT) + (BUILDING_WINDOW_HEIGHT / 2) + (y * BUILDING_WINDOW_HEIGHT * 2), BUILDING_WINDOW_WIDTH, BUILDING_WINDOW_HEIGHT);
            }
          }
        }
      }
      _results.push(buildingPosition += BUILDING_WIDTH);
    }
    return _results;
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// plane_canvas.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.planeCanvas = null;

  window.createPlaneCanvas = function() {
    var context, fuselageHeight, fuselageLength;
    window.planeCanvas = createCanvas(RANDOM_PLANE_WIDTH, RANDOM_PLANE_HEIGHT);
    context = planeCanvas.getContext("2d");
    context.strokeStyle = "#ffffff";
    context.fillStyle = "#ffffff";
    fuselageHeight = RANDOM_PLANE_HEIGHT / 2;
    fuselageLength = RANDOM_PLANE_WIDTH * 0.7;
    context.arc(fuselageHeight / 2, RANDOM_PLANE_HEIGHT - (fuselageHeight / 2), fuselageHeight / 2, 0.5 * Math.PI, 1.5 * Math.PI);
    context.fill();
    context.fillRect(fuselageHeight / 2, RANDOM_PLANE_HEIGHT - fuselageHeight, fuselageLength - (fuselageHeight / 2), fuselageHeight);
    context.beginPath();
    context.moveTo(fuselageLength, RANDOM_PLANE_HEIGHT - fuselageHeight);
    context.lineTo(fuselageLength + ((RANDOM_PLANE_WIDTH - fuselageLength) * 0.1), RANDOM_PLANE_HEIGHT - fuselageHeight);
    context.lineTo(fuselageLength + ((RANDOM_PLANE_WIDTH - fuselageLength) * 0.6), 0);
    context.lineTo(RANDOM_PLANE_WIDTH, 0);
    context.lineTo(fuselageLength + ((RANDOM_PLANE_WIDTH - fuselageLength) * 0.7), RANDOM_PLANE_HEIGHT - fuselageHeight);
    context.lineTo(RANDOM_PLANE_WIDTH, RANDOM_PLANE_HEIGHT - (fuselageHeight * 0.9));
    context.lineTo(fuselageLength, RANDOM_PLANE_HEIGHT);
    context.closePath();
    return context.fill();
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// player_canvas.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.playerCanvas = null;

  window.createPlayerCanvas = function() {
    var context, i, _i;
    window.playerCanvas = createCanvas(PLAYER_WIDTH, PLAYER_HEIGHT);
    context = playerCanvas.getContext("2d");
    context.fillStyle = Colour.PLAYER;
    context.fillRect(0, 0, PLAYER_WIDTH, PLAYER_HEIGHT);
    context.fillStyle = Colour.PLAYER_STRIPE;
    for (i = _i = 0; 0 <= PLAYER_STRIPE_COUNT ? _i < PLAYER_STRIPE_COUNT : _i > PLAYER_STRIPE_COUNT; i = 0 <= PLAYER_STRIPE_COUNT ? ++_i : --_i) {
      context.fillRect(i * 2 * PLAYER_STRIPE_WIDTH, 0, PLAYER_STRIPE_WIDTH, PLAYER_HEIGHT);
    }
    context.fillRect(PLAYER_WIDTH - PLAYER_EYE_BORDER - PLAYER_EYE_SIZE, PLAYER_EYE_BORDER, PLAYER_EYE_SIZE, PLAYER_EYE_SIZE);
    return context.fillRect(PLAYER_WIDTH - PLAYER_EYE_BORDER - PLAYER_EYE_SIZE, PLAYER_HEIGHT - PLAYER_EYE_BORDER - PLAYER_EYE_SIZE, PLAYER_EYE_SIZE + PLAYER_EYE_BORDER, PLAYER_EYE_SIZE);
  };

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// screen.js

// Generated by CoffeeScript 1.7.1
(function() {
  window.Screen = (function() {
    function Screen() {}

    Screen.prototype.update = function(deltaTime) {};

    Screen.prototype.render = function(context) {};

    Screen.prototype.close = function() {};

    return Screen;

  })();

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// game_over_screen.js

// Generated by CoffeeScript 1.7.1
(function() {
  var gameOverNameEnterFunction, gameOverPlayerName, maxGameOverPlayerNameLength,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gameOverPlayerName = "";

  maxGameOverPlayerNameLength = 8;

  gameOverNameEnterFunction = function(keyCode) {
    if (keyCode === 8) {
      gameOverPlayerName = gameOverPlayerName.substring(0, gameOverPlayerName.length - 1);
    }
    if (gameOverPlayerName.length < maxGameOverPlayerNameLength && ((48 <= keyCode && keyCode <= 57) || (65 <= keyCode && keyCode <= 90) || (97 <= keyCode && keyCode <= 122))) {
      return gameOverPlayerName += String.fromCharCode(keyCode).toLowerCase();
    }
  };

  window.GameOverScreen = (function(_super) {
    __extends(GameOverScreen, _super);

    function GameOverScreen(score, backgroundScroll) {
      var data, scores;
      this.score = score;
      this.backgroundScroll = backgroundScroll;
      this.spacePressed = 0;
      this.spaceMaxPressed = 3;
      data = loadGame();
      scores = data[SAVE_HIGHSCORE_TITLE];
      sortScoreArray(scores);
      this.isHighscore = (scores.length === 0 || (scores.length > 0 && this.score >= scores[0][0])) && this.score !== 0;
      this.inHighscoreList = this.isHighscore || scores.length < SAVE_HIGHSCORE_COUNT || (scores.length > 0 && this.score >= scores[scores.length - 1][0] && this.score !== 0);
      this.menuButton = new Button({
        x: GAME_OVERLAY_X + GAME_OVERLAY_BUTTON_MARGIN,
        y: GAME_OVERLAY_Y + GAME_OVERLAY_HEIGHT - GAME_OVERLAY_BUTTON_MARGIN - GAME_OVERLAY_BUTTON_HEIGHT,
        width: GAME_OVERLAY_BUTTON_WIDTH,
        height: GAME_OVERLAY_BUTTON_HEIGHT,
        text: "Menu",
        hoveredText: "> Menu <"
      });
      this.playAgain = new Button({
        x: GAME_OVERLAY_X + GAME_OVERLAY_BUTTON_MARGIN + (GAME_OVERLAY_WIDTH * 0.5),
        y: GAME_OVERLAY_Y + GAME_OVERLAY_HEIGHT - GAME_OVERLAY_BUTTON_MARGIN - GAME_OVERLAY_BUTTON_HEIGHT,
        width: GAME_OVERLAY_BUTTON_WIDTH,
        height: GAME_OVERLAY_BUTTON_HEIGHT,
        text: "Play again",
        hoveredText: "> Play again <"
      });
      gameOverPlayerName = data[SAVE_LAST_NAME_TITLE];
      setRespondToKeyDownFunction(gameOverNameEnterFunction);
      this.time = 0;
    }

    GameOverScreen.prototype.saveScore = function() {
      return addScore(this.score, gameOverPlayerName);
    };

    GameOverScreen.prototype.tryClose = function() {
      if (this.inHighscoreList && gameOverPlayerName.length > 0) {
        this.saveScore();
        return true;
      } else if (!this.highscore && !this.inHighscoreList) {
        return true;
      } else {
        return false;
      }
    };

    GameOverScreen.prototype.update = function(deltaTime) {
      this.time += deltaTime;
      this.menuButton.update(deltaTime);
      this.playAgain.update(deltaTime);
      if (this.menuButton.clicked) {
        if (this.tryClose()) {
          changeScreen(new MainMenuScreen());
        }
        return;
      }
      if (this.playAgain.clicked) {
        if (this.tryClose()) {
          changeScreen(new GameScreen());
        }
      }
    };

    GameOverScreen.prototype.render = function(context) {
      var text, textWidth;
      context.drawImage(backgroundCanvas, this.backgroundScroll, 0);
      context.drawImage(backgroundCanvas, this.backgroundScroll + BACKGROUND_WIDTH, 0);
      context.fillStyle = Colour.TEXT_BACKGROUND;
      context.fillRect(GAME_OVERLAY_X, GAME_OVERLAY_Y, GAME_OVERLAY_WIDTH, GAME_OVERLAY_HEIGHT);
      context.beginPath();
      context.strokeStyle = Colour.TEXT;
      context.lineWidth = OUTLINE_THICKNESS;
      context.rect(GAME_OVERLAY_X, GAME_OVERLAY_Y, GAME_OVERLAY_WIDTH, GAME_OVERLAY_HEIGHT);
      context.stroke();
      context.fillStyle = Colour.TEXT;
      context.font = GAME_OVERLAY_TITLE_FONT;
      context.textAlign = "center";
      context.textBaseline = "middle";
      context.fillText("Game Over!", GAME_OVERLAY_TITLE_TEXT_X, GAME_OVERLAY_TITLE_TEXT_Y);
      context.font = BODY_FONT;
      context.fillText("Score: " + this.score, GAME_OVERLAY_BODY_TEXT_X, GAME_OVERLAY_BODY_TEXT_Y);
      if (this.isHighscore) {
        context.fillText("New highscore!", GAME_OVERLAY_BODY_TEXT_X, GAME_OVERLAY_BODY_TEXT_Y + 64);
      }
      if (this.inHighscoreList) {
        context.textAlign = "left";
        text = "Your name: " + gameOverPlayerName;
        context.fillText(text, GAME_OVERLAY_BODY_TEXT_X * 0.6, GAME_OVERLAY_BODY_TEXT_Y + 128);
        if ((Math.floor(this.time * 10) / 10) - Math.floor(this.time) < 0.6) {
          textWidth = context.measureText(text).width;
          context.fillRect(GAME_OVERLAY_BODY_TEXT_X * 0.6 + textWidth, GAME_OVERLAY_BODY_TEXT_Y + 114, 2, 24);
        }
      }
      this.menuButton.render(context);
      return this.playAgain.render(context);
    };

    GameOverScreen.prototype.close = function() {
      gameOverPlayerName = "";
      return setRespondToKeyDownFunction(null);
    };

    return GameOverScreen;

  })(Screen);

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// game_screen.js

// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.GameScreen = (function(_super) {
    __extends(GameScreen, _super);

    function GameScreen(playerControlled) {
      var i, _i;
      this.playerControlled = playerControlled != null ? playerControlled : true;
      this.player = {
        x: PLAYER_START_X,
        y: PLAYER_START_Y,
        width: PLAYER_WIDTH,
        height: PLAYER_HEIGHT,
        velocity: 0,
        acceleration: GRAVITY,
        rotation: 0
      };
      this.firstPipeX = START_PIPE_X;
      this.pipes = [];
      for (i = _i = 0; 0 <= PIPE_COUNT ? _i < PIPE_COUNT : _i > PIPE_COUNT; i = 0 <= PIPE_COUNT ? ++_i : --_i) {
        this.pipes.push(this.newPipe());
      }
      this.score = 0;
      createPlayerCanvas();
      createBackgroundCanvas(Math.random() < DAYTIME_CHANCE);
      this.backgroundScroll = 0;
      createPlaneCanvas();
      this.randomPlane = this.generateRandomPlane();
      this.trail = [];
      this.trail.push([this.player.x, this.player.y + (this.player.height / 2)]);
      this.time = 0;
      this.paused = false;
      this.pauseButton = new Button({
        x: GAME_PAUSE_BUTTON_X + (GAME_SCORE_EXTRA_WIDTH / 2),
        y: GAME_SCORE_Y - (GAME_SCORE_EXTRA_WIDTH / 2),
        width: GAME_PAUSE_BUTTON_WIDTH,
        height: GAME_PAUSE_BUTTON_HEIGHT,
        text: "||",
        hoveredText: "||"
      });
      this.unpauseButton = new Button({
        x: GAME_OVERLAY_X + GAME_OVERLAY_BUTTON_MARGIN,
        y: GAME_OVERLAY_Y + GAME_OVERLAY_HEIGHT - GAME_OVERLAY_BUTTON_MARGIN - GAME_OVERLAY_BUTTON_HEIGHT,
        width: GAME_OVERLAY_BUTTON_WIDTH,
        height: GAME_OVERLAY_BUTTON_HEIGHT,
        text: "Unpause",
        hoveredText: "> Unpause <"
      });
    }

    GameScreen.prototype.randomPipeHeight = function() {
      return randomNumberInclusive(PIPE_MIN_HEIGHT, SCREEN_HEIGHT - PIPE_MIN_HEIGHT - PIPE_GAP_HEIGHT);
    };

    GameScreen.prototype.newPipe = function() {
      return {
        baseHeight: this.randomPipeHeight(),
        gapHeight: PIPE_GAP_HEIGHT,
        width: PIPE_WIDTH,
        scored: false
      };
    };

    GameScreen.prototype.playerJump = function() {
      this.player.velocity = JUMP_VELOCITY;
      return this.player.rotation = PLAYER_JUMP_ROTATION;
    };

    GameScreen.prototype.update = function(deltaTime) {
      var collision, deleteFrom, i, nextPipe, pipe, pipeCenter, trail, x, yDifference, _i, _j, _k, _l, _len, _len1, _len2, _m, _ref, _ref1, _ref2, _ref3, _ref4;
      this.time += deltaTime;
      if (this.playerControlled) {
        if (isKeyPressed(Key.PAUSE)) {
          this.paused = !this.paused;
          return;
        }
        if (this.paused) {
          this.unpauseButton.update(deltaTime);
          if (this.unpauseButton.clicked) {
            this.paused = false;
          }
          return;
        } else {
          this.pauseButton.update(deltaTime);
          if (this.pauseButton.clicked) {
            this.paused = true;
            return;
          }
        }
      }
      this.player.rotation += PLAYER_ROTATION_SPEED * deltaTime;
      if (this.playerControlled && (isKeyPressed(Key.JUMP) || isMousePressed())) {
        this.playerJump();
      }
      if (!this.playerControlled) {
        nextPipe = null;
        x = this.firstPipeX;
        _ref = this.pipes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pipe = _ref[_i];
          if (x + pipe.width >= this.player.x) {
            nextPipe = pipe;
            break;
          }
          x += pipe.width + PIPE_GAP_HORIZONTAL;
        }
        if (nextPipe != null) {
          pipeCenter = SCREEN_HEIGHT - nextPipe.baseHeight - (nextPipe.gapHeight / 2);
          yDifference = pipeCenter - this.player.y;
          if (yDifference < PLAYER_AI_MIN_Y_DIFFERENCE) {
            this.playerJump();
          }
        }
      }
      this.player.velocity += this.player.acceleration * deltaTime;
      this.player.y += this.player.velocity * deltaTime;
      if (this.player.y + this.player.height > SCREEN_HEIGHT) {
        this.player.y = SCREEN_HEIGHT - this.player.height;
        this.player.velocity = 0;
        if (this.playerControlled) {
          this.gameOver();
        }
      }
      if (this.player.y < 0) {
        this.player.y = 0;
        this.player.velocity = 0;
        if (this.playerControlled) {
          this.gameOver();
        }
      }
      this.firstPipeX -= MOVE_SPEED * deltaTime;
      if (this.firstPipeX < -PIPE_WIDTH * 2) {
        for (i = _j = 1, _ref1 = this.pipes.length; 1 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
          this.pipes[i - 1] = this.pipes[i];
        }
        this.pipes[PIPE_COUNT - 1] = this.newPipe();
        this.firstPipeX += PIPE_WIDTH + PIPE_GAP_HORIZONTAL;
      }
      this.backgroundScroll -= MOVE_SPEED * BACKGROUND_PARALLAX * deltaTime;
      if (this.backgroundScroll < -BACKGROUND_WIDTH) {
        this.backgroundScroll += BACKGROUND_WIDTH;
      }
      _ref2 = this.trail;
      for (_k = 0, _len1 = _ref2.length; _k < _len1; _k++) {
        trail = _ref2[_k];
        trail[0] -= MOVE_SPEED * deltaTime;
      }
      deleteFrom = -1;
      for (i = _l = _ref3 = this.trail.length - 1; _l >= 0; i = _l += -1) {
        if (this.trail[i][0] < 0) {
          deleteFrom = i - 1;
          break;
        }
      }
      if (deleteFrom >= 0) {
        this.trail.splice(0, deleteFrom + 1);
      }
      this.trail.push([this.player.x, this.player.y + (this.player.height / 2)]);
      if (this.player.rotation < -PLAYER_MAX_ROTATION) {
        this.player.rotation = -PLAYER_MAX_ROTATION;
      }
      if (this.player.rotation > PLAYER_MAX_ROTATION) {
        this.player.rotation = PLAYER_MAX_ROTATION;
      }
      x = this.firstPipeX;
      collision = false;
      _ref4 = this.pipes;
      for (_m = 0, _len2 = _ref4.length; _m < _len2; _m++) {
        pipe = _ref4[_m];
        if (x < this.player.x + this.player.width) {
          if (x + pipe.width > this.player.x && (this.player.y + this.player.height > SCREEN_HEIGHT - pipe.baseHeight || this.player.y < SCREEN_HEIGHT - pipe.baseHeight - pipe.gapHeight)) {
            collision = true;
            break;
          }
          if (x + pipe.width <= this.player.x) {
            if (!pipe.scored) {
              this.score += 1;
            }
            pipe.scored = true;
          }
        }
        x += pipe.width + PIPE_GAP_HORIZONTAL;
      }
      if (collision && this.playerControlled) {
        return this.gameOver();
      }
      this.randomPlane.x -= RANDOM_PLANE_SPEED * deltaTime;
      if (this.randomPlane.x + this.randomPlane.width + RANDOM_PLANE_TRAIL_LENGTH < 0) {
        return this.randomPlane = this.generateRandomPlane();
      }
    };

    GameScreen.prototype.generateRandomPlane = function() {
      return {
        x: randomNumberInclusive(RANDOM_PLANE_MIN_X, RANDOM_PLANE_MAX_X),
        y: randomNumberInclusive(RANDOM_PLANE_MIN_Y, RANDOM_PLANE_MAX_Y),
        width: RANDOM_PLANE_WIDTH,
        height: RANDOM_PLANE_HEIGHT
      };
    };

    GameScreen.prototype.gameOver = function() {
      return changeScreen(new GameOverScreen(this.score, this.backgroundScroll));
    };

    GameScreen.prototype.render = function(context) {
      var i, pipe, scoreText, x, _i, _j, _len, _ref, _ref1;
      context.fillStyle = "#ffffff";
      context.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
      context.drawImage(backgroundCanvas, Math.floor(this.backgroundScroll), 0);
      context.drawImage(backgroundCanvas, Math.floor(this.backgroundScroll + BACKGROUND_WIDTH), 0);
      if (this.randomPlane.x < CANVAS_WIDTH) {
        context.drawImage(planeCanvas, this.randomPlane.x, this.randomPlane.y);
        context.fillStyle = "#ffffff";
        context.fillRect(this.randomPlane.x, this.randomPlane.y + (this.randomPlane.height * 0.75), RANDOM_PLANE_TRAIL_LENGTH, RANDOM_PLANE_TRAIL_THICKNESS);
      }
      context.fillStyle = Colour.PIPE;
      x = this.firstPipeX;
      _ref = this.pipes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pipe = _ref[_i];
        if (x > CANVAS_WIDTH) {
          break;
        }
        context.fillRect(x, SCREEN_HEIGHT - pipe.baseHeight, PIPE_WIDTH, pipe.baseHeight);
        context.fillRect(x, 0, PIPE_WIDTH, SCREEN_HEIGHT - (pipe.baseHeight + pipe.gapHeight));
        x += pipe.width + PIPE_GAP_HORIZONTAL;
      }
      if (this.trail.length >= 1) {
        context.strokeStyle = Colour.PLAYER;
        context.fillStyle = Colour.PLAYER;
        context.lineWidth = PLAYER_TRAIL_THICKNESS;
        context.beginPath();
        context.moveTo(this.trail[0][0], this.trail[0][1]);
        if (this.trail.length >= 2) {
          for (i = _j = 1, _ref1 = this.trail.length; 1 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
            context.lineTo(this.trail[i][0], this.trail[i][1]);
          }
        }
        context.lineTo(this.player.x, this.player.y + (this.player.height / 2));
        context.lineTo(this.player.x + 8, this.player.y + (this.player.height / 2));
        context.stroke();
      }
      context.translate(this.player.x, this.player.y + (this.player.height / 2));
      context.rotate(this.player.rotation * Math.PI / 180);
      context.drawImage(playerCanvas, 0, -this.player.height / 2);
      context.rotate(-this.player.rotation * Math.PI / 180);
      context.translate(-this.player.x, -(this.player.y + (this.player.height / 2)));
      if (this.playerControlled) {
        context.font = BODY_FONT;
        context.textAlign = "left";
        context.textBaseline = "top";
        scoreText = "Score: " + this.score;
        context.fillStyle = Colour.TEXT_BACKGROUND;
        context.fillRect(GAME_SCORE_X - (GAME_SCORE_EXTRA_WIDTH / 2), GAME_SCORE_Y - (GAME_SCORE_EXTRA_WIDTH / 2), context.measureText(scoreText).width + GAME_SCORE_EXTRA_WIDTH, GAME_SCORE_HEIGHT);
        context.beginPath();
        context.strokeStyle = Colour.TEXT;
        context.lineWidth = OUTLINE_THICKNESS;
        context.rect(GAME_SCORE_X - (GAME_SCORE_EXTRA_WIDTH / 2), GAME_SCORE_Y - (GAME_SCORE_EXTRA_WIDTH / 2), context.measureText(scoreText).width + GAME_SCORE_EXTRA_WIDTH, GAME_SCORE_HEIGHT);
        context.stroke();
        context.fillStyle = Colour.TEXT;
        context.fillText(scoreText, GAME_SCORE_X, GAME_SCORE_Y);
        if (this.paused) {
          context.fillStyle = Colour.TEXT_BACKGROUND;
          context.fillRect(GAME_OVERLAY_X, GAME_OVERLAY_Y, GAME_OVERLAY_WIDTH, GAME_OVERLAY_HEIGHT);
          context.beginPath();
          context.strokeStyle = Colour.TEXT;
          context.lineWidth = OUTLINE_THICKNESS;
          context.rect(GAME_OVERLAY_X, GAME_OVERLAY_Y, GAME_OVERLAY_WIDTH, GAME_OVERLAY_HEIGHT);
          context.stroke();
          context.fillStyle = Colour.TEXT;
          context.font = GAME_OVERLAY_TITLE_FONT;
          context.textAlign = "center";
          context.textBaseline = "middle";
          context.fillText("Paused", GAME_OVERLAY_TITLE_TEXT_X, GAME_OVERLAY_TITLE_TEXT_Y);
          context.font = BODY_FONT;
          context.fillText("Press P or Esc to unpause", GAME_OVERLAY_BODY_TEXT_X, GAME_OVERLAY_BODY_TEXT_Y);
          return this.unpauseButton.render(context);
        } else {
          return this.pauseButton.render(context);
        }
      }
    };

    return GameScreen;

  })(Screen);

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// help_screen.js

// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.HelpScreen = (function(_super) {
    __extends(HelpScreen, _super);

    function HelpScreen() {
      this.menuButton = new Button({
        x: GAME_OVERLAY_X + GAME_OVERLAY_BUTTON_MARGIN,
        y: GAME_OVERLAY_Y + GAME_OVERLAY_HEIGHT - GAME_OVERLAY_BUTTON_MARGIN - GAME_OVERLAY_BUTTON_HEIGHT,
        width: GAME_OVERLAY_BUTTON_WIDTH,
        height: GAME_OVERLAY_BUTTON_HEIGHT,
        text: "Menu",
        hoveredText: "> Menu <"
      });
    }

    HelpScreen.prototype.update = function(deltaTime) {
      this.menuButton.update(deltaTime);
      if (this.menuButton.clicked) {
        changeScreen(new MainMenuScreen());
      }
    };

    HelpScreen.prototype.render = function(context) {
      context.drawImage(backgroundCanvas, 0, 0);
      return this.menuButton.render(context);
    };

    return HelpScreen;

  })(Screen);

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// highscores_screen.js

// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.HighscoresScreen = (function(_super) {
    __extends(HighscoresScreen, _super);

    function HighscoresScreen() {
      this.scores = loadGame()[SAVE_HIGHSCORE_TITLE];
      sortScoreArray(this.scores);
      this.scores.splice(SAVE_HIGHSCORE_COUNT);
      this.menuButton = new Button({
        x: GAME_OVERLAY_X + GAME_OVERLAY_BUTTON_MARGIN,
        y: GAME_OVERLAY_Y + GAME_OVERLAY_HEIGHT - GAME_OVERLAY_BUTTON_MARGIN - GAME_OVERLAY_BUTTON_HEIGHT,
        width: GAME_OVERLAY_BUTTON_WIDTH,
        height: GAME_OVERLAY_BUTTON_HEIGHT,
        text: "Menu",
        hoveredText: "> Menu <"
      });
      this.clearScores = new Button({
        x: GAME_OVERLAY_X + GAME_OVERLAY_BUTTON_MARGIN + (GAME_OVERLAY_WIDTH * 0.5),
        y: GAME_OVERLAY_Y + GAME_OVERLAY_HEIGHT - GAME_OVERLAY_BUTTON_MARGIN - GAME_OVERLAY_BUTTON_HEIGHT,
        width: GAME_OVERLAY_BUTTON_WIDTH,
        height: GAME_OVERLAY_BUTTON_HEIGHT,
        text: "Clear scores",
        hoveredText: "> Clear scores <"
      });
    }

    HighscoresScreen.prototype.update = function(deltaTime) {
      this.menuButton.update(deltaTime);
      this.clearScores.update(deltaTime);
      if (this.menuButton.clicked) {
        changeScreen(new MainMenuScreen());
        return;
      }
      if (this.clearScores.clicked) {
        clearSave();
        changeScreen(new HighscoresScreen());
      }
    };

    HighscoresScreen.prototype.render = function(context) {
      var i, y, _i;
      context.drawImage(backgroundCanvas, 0, 0);
      context.fillStyle = Colour.TEXT_BACKGROUND;
      context.fillRect(GAME_OVERLAY_X, GAME_OVERLAY_Y, GAME_OVERLAY_WIDTH, GAME_OVERLAY_HEIGHT);
      context.beginPath();
      context.strokeStyle = Colour.TEXT;
      context.lineWidth = OUTLINE_THICKNESS;
      context.rect(GAME_OVERLAY_X, GAME_OVERLAY_Y, GAME_OVERLAY_WIDTH, GAME_OVERLAY_HEIGHT);
      context.stroke();
      context.fillStyle = Colour.TEXT;
      context.font = GAME_OVERLAY_TITLE_FONT;
      context.textAlign = "center";
      context.textBaseline = "middle";
      context.fillText("Highscores", GAME_OVERLAY_TITLE_TEXT_X, GAME_OVERLAY_TITLE_TEXT_Y);
      context.textAlign = "left";
      context.font = BODY_FONT;
      y = GAME_OVERLAY_BODY_TEXT_Y * 0.7;
      for (i = _i = 0; 0 <= SAVE_HIGHSCORE_COUNT ? _i < SAVE_HIGHSCORE_COUNT : _i > SAVE_HIGHSCORE_COUNT; i = 0 <= SAVE_HIGHSCORE_COUNT ? ++_i : --_i) {
        context.fillText("" + (i + 1) + ": " + (i < this.scores.length ? this.scores[i][0].toString() + ' - ' + this.scores[i][1] : '0'), GAME_OVERLAY_BODY_TEXT_X * 0.6, y);
        y += 32;
      }
      this.menuButton.render(context);
      return this.clearScores.render(context);
    };

    return HighscoresScreen;

  })(Screen);

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// main_menu_screen.js

// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.MainMenuScreen = (function(_super) {
    __extends(MainMenuScreen, _super);

    function MainMenuScreen() {
      var MAIN_BUTTON_HEIGHT, MAIN_BUTTON_MARGIN, MAIN_BUTTON_START_Y, MAIN_BUTTON_WIDTH, MAIN_BUTTON_X;
      createBackgroundCanvas(Math.random() < DAYTIME_CHANCE);
      this.game = new GameScreen(false);
      MAIN_BUTTON_MARGIN = MAIN_PLAY_BOX_HEIGHT / 10;
      MAIN_BUTTON_X = MAIN_PLAY_BOX_X + (MAIN_PLAY_BOX_WIDTH * 0.05);
      MAIN_BUTTON_START_Y = MAIN_PLAY_BOX_Y + MAIN_BUTTON_MARGIN;
      MAIN_BUTTON_WIDTH = MAIN_PLAY_BOX_WIDTH * 0.9;
      MAIN_BUTTON_HEIGHT = MAIN_PLAY_BOX_HEIGHT / 5;
      this.playButton = new Button({
        x: MAIN_BUTTON_X,
        y: MAIN_BUTTON_START_Y,
        width: MAIN_BUTTON_WIDTH,
        height: MAIN_BUTTON_HEIGHT,
        text: "Play!",
        hoveredText: "> Play! <"
      });
      this.helpButton = new Button({
        x: MAIN_BUTTON_X,
        y: MAIN_BUTTON_START_Y + (MAIN_BUTTON_HEIGHT + MAIN_BUTTON_MARGIN),
        width: MAIN_BUTTON_WIDTH,
        height: MAIN_BUTTON_HEIGHT,
        text: "Help!",
        hoveredText: "> Help! <"
      });
      this.highscoresButton = new Button({
        x: MAIN_BUTTON_X,
        y: MAIN_BUTTON_START_Y + (2 * (MAIN_BUTTON_HEIGHT + MAIN_BUTTON_MARGIN)),
        width: MAIN_BUTTON_WIDTH,
        height: MAIN_BUTTON_HEIGHT,
        text: "Highscores",
        hoveredText: "> Highscores <"
      });
    }

    MainMenuScreen.prototype.update = function(deltaTime) {
      this.game.update(deltaTime);
      this.playButton.update(deltaTime);
      this.helpButton.update(deltaTime);
      this.highscoresButton.update(deltaTime);
      if (isKeyPressed(Key.JUMP) || this.playButton.clicked) {
        changeScreen(new GameScreen());
        return;
      }
      if (this.helpButton.clicked) {
        changeScreen(new HelpScreen());
        return;
      }
      if (this.highscoresButton.clicked) {
        changeScreen(new HighscoresScreen());
      }
    };

    MainMenuScreen.prototype.render = function(context) {
      var height, titleText, width;
      this.game.render(context);
      context.font = GAME_OVERLAY_TITLE_FONT;
      context.textAlign = "center";
      context.textBaseline = "middle";
      titleText = "Buzzy Bee!";
      width = context.measureText(titleText).width + MAIN_TITLE_EXTRA_WIDTH;
      height = 45;
      context.translate(MAIN_TITLE_X, MAIN_TITLE_Y);
      context.rotate(MAIN_TITLE_ANGLE);
      context.fillStyle = Colour.TEXT_BACKGROUND;
      context.fillRect(-width / 2, -MAIN_TITLE_HEIGHT / 2, width, MAIN_TITLE_HEIGHT);
      context.beginPath();
      context.strokeStyle = Colour.TEXT;
      context.lineWidth = OUTLINE_THICKNESS;
      context.rect(-width / 2, -MAIN_TITLE_HEIGHT / 2, width, MAIN_TITLE_HEIGHT);
      context.stroke();
      context.fillStyle = Colour.TEXT;
      context.fillText("Buzzy Bee!", 0, 0);
      context.rotate(-MAIN_TITLE_ANGLE);
      context.translate(-MAIN_TITLE_X, -MAIN_TITLE_Y);
      context.fillStyle = Colour.TEXT_BACKGROUND;
      context.fillRect(MAIN_PLAY_BOX_X, MAIN_PLAY_BOX_Y, MAIN_PLAY_BOX_WIDTH, MAIN_PLAY_BOX_HEIGHT);
      context.beginPath();
      context.strokeStyle = Colour.TEXT;
      context.lineWidth = OUTLINE_THICKNESS;
      context.rect(MAIN_PLAY_BOX_X, MAIN_PLAY_BOX_Y, MAIN_PLAY_BOX_WIDTH, MAIN_PLAY_BOX_HEIGHT);
      context.stroke();
      this.playButton.render(context);
      this.helpButton.render(context);
      return this.highscoresButton.render(context);
    };

    return MainMenuScreen;

  })(Screen);

}).call(this);




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// script.js

// Generated by CoffeeScript 1.7.1
(function() {
  var context, deltaTime, lastTime, main, now, screen;

  if (typeof String.prototype.startsWith !== "function") {
    String.prototype.startsWith = function(prefix) {
      return this.indexOf(prefix) === 0;
    };
  }

  if (typeof String.prototype.endsWith !== "function") {
    String.prototype.endsWith = function(suffix) {
      return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
  }

  window.canvas = null;

  context = null;

  screen = null;

  window.changeScreen = function(newScreen) {
    if (screen != null) {
      screen.close();
    }
    screen = newScreen;
    cleanKeys();
    updateKeys();
    return updateMouse();
  };

  lastTime = Date.now();

  now = Date.now();

  deltaTime = 0;

  main = function() {
    window.requestAnimFrame(main);
    now = Date.now();
    deltaTime = (now - lastTime) / 1000.0;
    screen.update(deltaTime);
    screen.render(context);
    updateKeys();
    updateMouse();
    return lastTime = now;
  };

  window.onload = function() {
    window.canvas = createCanvas(CANVAS_WIDTH, CANVAS_HEIGHT);
    document.body.appendChild(canvas);
    canvas.setAttribute("tabindex", "1");
    canvas.focus();
    canvas.onkeydown = onKeyDown;
    canvas.onkeyup = onKeyUp;
    canvas.onmousedown = onMouseDown;
    canvas.onmousemove = onMouseMove;
    canvas.onmouseup = onMouseUp;
    context = canvas.getContext("2d");
    createPlayerCanvas();
    createBackgroundCanvas(Math.random() < DAYTIME_CHANCE);
    createPlaneCanvas();
    changeScreen(new MainMenuScreen());
    lastTime = Date.now();
    return main();
  };

}).call(this);